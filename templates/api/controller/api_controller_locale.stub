<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_API_REQUEST$\$MODEL_NAME$Request;
use $NAMESPACE_API_RESOURCE$\$MODEL_NAME$Resource;
use Illuminate\Http\Request;
use Response;

$DOC_CONTROLLER$
class $MODEL_NAME$APIController extends Controller
{
    $DOC_INDEX$
    public function index(Request $request)
    {
        $this->authorize('read', new $MODEL_NAME$());

        $validated = $request->validated();

        $query = request('query');

        if ($query) {
            return $MODEL_NAME$Resource::collection($MODEL_NAME$::search($query)->paginate());
        }

        return $MODEL_NAME$Resource::collection($MODEL_NAME$::all()->paginate());
    }

    $DOC_STORE$
    public function store($MODEL_NAME$Request $request)
    {
        $this->authorize('create', new $MODEL_NAME_CAMEL$());

        $validated = $request->validated();

        $$MODEL_NAME_CAMEL$ = $MODEL_NAME_CAMEL$::create($validated);

        return (new $MODEL_NAME$Resource($$MODEL_NAME_CAMEL$, false))->response()->setStatusCode(201);
    }

    $DOC_SHOW$
    public function show($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        $this->authorize('read', $$MODEL_NAME_CAMEL$);

        return new $MODEL_NAME$Resource($$MODEL_NAME_CAMEL$, false);
    }

    $DOC_UPDATE$
    public function update($MODEL_NAME$Request $request, $MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        $this->authorize('update', $$MODEL_NAME_CAMEL$);

        $validated = $request->validated();
        $$MODEL_NAME_CAMEL$->fill($validated)->save();

        return new CardResource($$MODEL_NAME_CAMEL$, false);
    }

    $DOC_DESTROY$
    public function destroy($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        $this->authorize('delete', $$MODEL_NAME_CAMEL$);

        $$MODEL_NAME_CAMEL$->delete();

        return response()->json(null, 204);
    }
}
